{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "pl-zpsb-adf-prod"
		},
		"SQL_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQL'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=pl-zsz-01.database.windows.net;Initial Catalog=pl-zpsb-sql-prod;User ID=AzureADF"
		},
		"KV_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://pl-zpsb01-kv.vault.azure.net/"
		},
		"OpenWeatherSource_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.openweathermap.org"
		},
		"Storage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://plzpsbstorage01.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_Data_Extract')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExtractCurrentWeather",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set FolderPath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "OpenWeatherSourceREST",
								"type": "DatasetReference",
								"parameters": {
									"Latitude": {
										"value": "@pipeline().parameters.LocationLatitude",
										"type": "Expression"
									},
									"Longitude": {
										"value": "@pipeline().parameters.LocationLongitude",
										"type": "Expression"
									},
									"APIKey": {
										"value": "@pipeline().parameters.APIKey",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "OpenWeatherSinkDL",
								"type": "DatasetReference",
								"parameters": {
									"LocationName": {
										"value": "@pipeline().parameters.LocationName",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@variables('FolderPath')",
										"type": "Expression"
									},
									"ExtractHour": {
										"value": "@variables('CurrentHour')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set FolderPath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set CurrentHour",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "FolderPath",
							"value": {
								"value": "@{formatDateTime(variables('CurrentDateTime'), 'yyyy/MM/dd/HH')}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set CurrentDateTime",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "CurrentDateTime",
							"value": {
								"value": "@convertTimeZone(utcnow(), 'UTC', 'Central Europe Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set CurrentHour",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set CurrentDateTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "CurrentHour",
							"value": {
								"value": "@formatDateTime(variables('CurrentDateTime'), 'HH')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExtractCurrentWeather",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[logging].[InsertExtractedFile]",
							"storedProcedureParameters": {
								"ExtractionDate": {
									"value": {
										"value": "@variables('CurrentDateTime')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"FileName": {
									"value": {
										"value": "@{concat(pipeline().parameters.LocationName,'_',variables('CurrentHour'))}",
										"type": "Expression"
									},
									"type": "String"
								},
								"FilePath": {
									"value": {
										"value": "@variables('FolderPath')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"LocationLatitude": {
						"type": "string"
					},
					"LocationLongitude": {
						"type": "string"
					},
					"APIKey": {
						"type": "string"
					},
					"LocationName": {
						"type": "string"
					}
				},
				"variables": {
					"FolderPath": {
						"type": "String"
					},
					"CurrentDateTime": {
						"type": "String"
					},
					"CurrentHour": {
						"type": "String"
					},
					"Array": {
						"type": "Array"
					},
					"ItemName": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Extract"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OpenWeatherSourceREST')]",
				"[concat(variables('factoryId'), '/datasets/OpenWeatherSinkDL')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Data_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load To SQL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['coord']['lon']"
										},
										"sink": {
											"name": "Lon",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['coord']['lat']"
										},
										"sink": {
											"name": "Lat",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['weather'][0]['id']"
										},
										"sink": {
											"name": "WeatherId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['weather'][0]['main']"
										},
										"sink": {
											"name": "WeatherMain",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['weather'][0]['description']"
										},
										"sink": {
											"name": "WeatherDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['weather'][0]['icon']"
										},
										"sink": {
											"name": "WeatherIcon",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['base']"
										},
										"sink": {
											"name": "Base",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['main']['temp']"
										},
										"sink": {
											"name": "Temp",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['main']['feels_like']"
										},
										"sink": {
											"name": "FeelsLike",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['main']['temp_min']"
										},
										"sink": {
											"name": "TempMin",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['main']['temp_max']"
										},
										"sink": {
											"name": "TempMax",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['main']['pressure']"
										},
										"sink": {
											"name": "Pressure",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['main']['humidity']"
										},
										"sink": {
											"name": "Humidity",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['visibility']"
										},
										"sink": {
											"name": "Visibility",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['wind']['speed']"
										},
										"sink": {
											"name": "WindSpeed",
											"type": "Double"
										}
									},
									{
										"source": {
											"path": "$['wind']['deg']"
										},
										"sink": {
											"name": "WindDeg",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['clouds']['all']"
										},
										"sink": {
											"name": "CloudsAll",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['dt']"
										},
										"sink": {
											"name": "Dt",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['sys']['type']"
										},
										"sink": {
											"name": "SysType",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['sys']['id']"
										},
										"sink": {
											"name": "SysId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['sys']['country']"
										},
										"sink": {
											"name": "SysCountry",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['sys']['sunrise']"
										},
										"sink": {
											"name": "SysSunrise",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['sys']['sunset']"
										},
										"sink": {
											"name": "SysSunset",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['timezone']"
										},
										"sink": {
											"name": "Timezone",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "CityId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['name']"
										},
										"sink": {
											"name": "CityName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['cod']"
										},
										"sink": {
											"name": "Cod",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DLSource",
								"type": "DatasetReference",
								"parameters": {
									"FilePath": {
										"value": "@pipeline().parameters.FilePath",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ODS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ExecuteUpdateExtractedFiles",
						"description": "Updates logging.ExtractedFiles table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load To SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[logging].[UpdateIsLoaded]",
							"storedProcedureParameters": {
								"FileID": {
									"value": {
										"value": "@pipeline().parameters.FileID",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileID": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"FilePath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Load"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DLSource')]",
				"[concat(variables('factoryId'), '/datasets/ODS')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Master_Extract')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach Location",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetObjectsToExtract",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetObjectsToExtract').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute PL_Data_Extract",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Data_Extract",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"LocationLatitude": {
												"value": "@item().Latitude",
												"type": "Expression"
											},
											"LocationLongitude": {
												"value": "@item().Longitude",
												"type": "Expression"
											},
											"APIKey": {
												"value": "@variables('OpenWeatherAPIKey')",
												"type": "Expression"
											},
											"LocationName": {
												"value": "@item().Location",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "SetOpenWeatherAPIKey",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetOpenWeatherAPIKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "OpenWeatherAPIKey",
							"value": {
								"value": "@activity('GetOpenWeatherAPIKey').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetOpenWeatherAPIKey",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://pl-zpsb01-kv.vault.azure.net/secrets/OpenWeatherAPIKey/dff1513a6abc49ec8701b45716a5b9f1?api-version=7.0",
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "GetObjectsToExtract",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetOpenWeatherAPIKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[config].[GetObjectsToExtract]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GetLocationsToExtract",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"OpenWeatherAPIKey": {
						"type": "String"
					},
					"LocationsArray": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Extract"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GetLocationsToExtract')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Data_Extract')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Master_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetObjectsToLoad",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[config].[GetObjectsToLoad]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GetLocationsToExtract",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach_Object",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetObjectsToLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetObjectsToLoad').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute PL_Data_Load",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Data_Load",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"FileID": {
												"value": "@item().FileID",
												"type": "Expression"
											},
											"FileName": {
												"value": "@concat(item().FileName,'.json') ",
												"type": "Expression"
											},
											"FilePath": {
												"value": "@item().FilePath",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Load"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GetLocationsToExtract')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Data_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DLSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FilePath": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FilePath",
							"type": "Expression"
						},
						"fileSystem": "zpsb"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetLocationsToExtract')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQL",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Extract"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Location",
						"type": "nvarchar"
					},
					{
						"name": "Latitude",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "Longitude",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "config",
					"table": "ObjectsToExtract"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ODS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Lon",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Lat",
						"type": "float",
						"precision": 15
					},
					{
						"name": "WeatherId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WeatherMain",
						"type": "nvarchar"
					},
					{
						"name": "WeatherDescription",
						"type": "nvarchar"
					},
					{
						"name": "WeatherIcon",
						"type": "nvarchar"
					},
					{
						"name": "Base",
						"type": "nvarchar"
					},
					{
						"name": "Temp",
						"type": "float",
						"precision": 15
					},
					{
						"name": "FeelsLike",
						"type": "float",
						"precision": 15
					},
					{
						"name": "TempMin",
						"type": "float",
						"precision": 15
					},
					{
						"name": "TempMax",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Pressure",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Humidity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Visibility",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WindSpeed",
						"type": "float",
						"precision": 15
					},
					{
						"name": "WindDeg",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WindGust",
						"type": "float",
						"precision": 15
					},
					{
						"name": "CloudsAll",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Dt",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SysType",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SysId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SysCountry",
						"type": "nvarchar"
					},
					{
						"name": "SysSunrise",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SysSunset",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Timezone",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CityId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CityName",
						"type": "nvarchar"
					},
					{
						"name": "Cod",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "ODS",
					"table": "WeatherData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpenWeatherSinkDL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"LocationName": {
						"type": "String"
					},
					"FolderPath": {
						"type": "string"
					},
					"ExtractHour": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Extract"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@{concat(dataset().LocationName,'_',dataset().ExtractHour,'.json')}",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"fileSystem": "zpsb"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpenWeatherSourceREST')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OpenWeatherSource",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Latitude": {
						"type": "string"
					},
					"Longitude": {
						"type": "string"
					},
					"APIKey": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Extract"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('/data/2.5/weather?lat=',dataset().Latitude, '&lon=',dataset().Longitude, '&appid=',dataset().APIKey,'&units=metric')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OpenWeatherSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('KV_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpenWeatherSource')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('OpenWeatherSource_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"APIKey": {
							"type": "AzureKeyVaultSecret",
							"store": {
								"referenceName": "KV",
								"type": "LinkedServiceReference"
							},
							"secretName": "OpenWeatherAPIKey"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SQL_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KV",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQLAzureADFSecret"
					},
					"alwaysEncryptedSettings": {
						"alwaysEncryptedAkvAuthType": "ManagedIdentity"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Storage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('Storage_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Master_Extract')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Master_Extract",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2023-10-03T20:00:00",
						"timeZone": "Central European Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Master_Extract')]"
			]
		}
	]
}